{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Libredesk is an open source, self-hosted customer support desk. Single binary app.</p>"},{"location":"#developers","title":"Developers","text":"<p>Libredesk is a free and open source software licensed under AGPLv3. If you are interested in contributing, check out the GitHub repository and refer to the developer setup. The backend is written in Go and the frontend is Vue js 3 with Shadcn for UI components.</p>"},{"location":"developer-setup/","title":"Developer Setup","text":"<p>Libredesk is a monorepo with a Go backend and a Vue.js frontend. The frontend uses Shadcn for UI components.</p>"},{"location":"developer-setup/#pre-requisites","title":"Pre-requisites","text":"<ul> <li><code>go</code></li> <li><code>nodejs</code> (if you are working on the frontend) and <code>pnpm</code></li> <li>Postgres database (&gt;= 13)</li> </ul>"},{"location":"developer-setup/#first-time-setup","title":"First time setup","text":"<p>Clone the repository:</p> <pre><code>git clone https://github.com/abhinavxd/libredesk.git\n</code></pre> <ol> <li>Copy <code>config.toml.sample</code> as <code>config.toml</code> and add your config.</li> <li>Run <code>make</code> to build the libredesk binary. Once the binary is built, run <code>./libredesk --install</code> to run the DB setup and set the System user password.</li> </ol>"},{"location":"developer-setup/#running-the-dev-environment","title":"Running the Dev Environment","text":"<ol> <li>Run <code>make run-backend</code> to start the libredesk backend dev server on <code>:9000</code>.</li> <li>Run <code>make run-frontend</code> to start the Vue frontend in dev mode using pnpm on <code>:8000</code>. Requests are proxied to the backend running on <code>:9000</code> check <code>vite.config.js</code> for the proxy config.</li> </ol>"},{"location":"developer-setup/#production-build","title":"Production Build","text":"<p>Run <code>make</code> to build the Go binary, build the Javascript frontend, and embed the static assets producing a single self-contained binary, <code>libredesk</code>.</p>"},{"location":"installation/","title":"Installation","text":"<p>Libredesk is a single binary application that requires postgres and redis to run. You can install it using the binary or docker.</p>"},{"location":"installation/#binary","title":"Binary","text":"<ol> <li>Download the latest release and extract the libredesk binary.</li> <li><code>./libredesk --install</code> to install the tables in the Postgres DB (\u2a7e 13) and set the System user password.</li> <li>Run <code>./libredesk</code> and visit <code>http://localhost:9000</code> and login with the email <code>System</code> and the password you set during installation.</li> </ol> <p>Tip</p> <p>To set the System user password during installation, set the environment variables: <code>LIBREDESK_SYSTEM_USER_PASSWORD=xxxxxxxxxxx ./libredesk --install</code></p>"},{"location":"installation/#docker","title":"Docker","text":"<p>The latest image is available on DockerHub at <code>libredesk/libredesk:latest</code></p> <p>The recommended method is to download the docker-compose.yml file, customize it for your environment and then to simply run <code>docker compose up -d</code>.</p> <pre><code># Download the compose file and the sample config file in the current directory.\ncurl -LO https://github.com/abhinavxd/libredesk/raw/main/docker-compose.yml\ncurl -LO https://github.com/abhinavxd/libredesk/raw/main/config.sample.toml\n\n# Copy the config.sample.toml to config.toml and edit it as needed.\ncp config.sample.toml config.toml\n\n# Edit config.toml and find commented lines containing \"docker compose\". Replace the values in the lines below those comments with service names instead of IP addresses.\n\n# Run the services in the background.\ndocker compose up -d\n\n# Setting System user password.\ndocker exec -it libredesk_app ./libredesk --set-system-user-password\n</code></pre> <p>Go to <code>http://localhost:9000</code> and login with the email <code>System</code> and the password you set using the <code>--set-system-user-password</code> command.</p>"},{"location":"installation/#compiling-from-source","title":"Compiling from source","text":"<p>To compile the latest unreleased version (<code>main</code> branch):</p> <ol> <li>Make sure <code>go</code>, <code>nodejs</code>, and <code>pnpm</code> are installed on your system.</li> <li><code>git clone git@github.com:abhinavxd/libredesk.git</code></li> <li><code>cd libredesk &amp;&amp; make</code>. This will generate the <code>libredesk</code> binary.</li> </ol>"},{"location":"installation/#nginx","title":"Nginx","text":"<p>Libredesk using websockets for real-time updates. If you are using Nginx, you need to add the following (or similar) configuration to your Nginx configuration file.</p> <pre><code>location / {\n    proxy_pass http://localhost:9000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n}\n</code></pre>"},{"location":"upgrade/","title":"Upgrade","text":"<p>Warning</p> <p>Always take a backup of the Postgres database before upgrading Libredesk.</p>"},{"location":"upgrade/#binary","title":"Binary","text":"<ul> <li>Stop running libredesk binary.</li> <li>Download the latest release and extract the libredesk binary and overwrite the previous version.</li> <li><code>./libredesk --upgrade</code> to upgrade an existing database schema. Upgrades are idempotent and running them multiple times have no side effects.</li> <li>Run <code>./libredesk</code> again.</li> </ul>"},{"location":"upgrade/#docker","title":"Docker","text":"<pre><code>docker compose down app\ndocker compose pull\ndocker compose up app -d\n</code></pre>"}]}